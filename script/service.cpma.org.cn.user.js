// ==UserScript==
// @name         自动学习助手
// @namespace    http://tampermonkey.net/
// @version      1.0.1
// @description  自动快速看视频，自动答题并提交
// @author       千川汇海
// @match        https://service.cpma.org.cn/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=fusejs.io
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    (()=>{"use strict";function t(t){return Array.isArray?Array.isArray(t):"[object Array]"===h(t)}const e=1/0;function n(t){return null==t?"":function(t){if("string"==typeof t)return t;let n=t+"";return"0"==n&&1/t==-e?"-0":n}(t)}function s(t){return"string"==typeof t}function r(t){return"number"==typeof t}function i(t){return!0===t||!1===t||function(t){return a(t)&&null!==t}(t)&&"[object Boolean]"==h(t)}function a(t){return"object"==typeof t}function o(t){return null!=t}function l(t){return!t.trim().length}function h(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Object.prototype.toString.call(t)}const c=t=>`Missing ${t} property in key`,d=t=>`Property 'weight' in key '${t}' must be a positive integer`,u=Object.prototype.hasOwnProperty;class f{constructor(t){this._keys=[],this._keyMap={};let e=0;t.forEach((t=>{let n=p(t);this._keys.push(n),this._keyMap[n.id]=n,e+=n.weight})),this._keys.forEach((t=>{t.weight/=e}))}get(t){return this._keyMap[t]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function p(e){let n=null,r=null,i=null,a=1,o=null;if(s(e)||t(e))i=e,n=g(e),r=m(e);else{if(!u.call(e,"name"))throw new Error(c("name"));const t=e.name;if(i=t,u.call(e,"weight")&&(a=e.weight,a<=0))throw new Error(d(t));n=g(t),r=m(t),o=e.getFn}return{path:n,id:r,weight:a,src:i,getFn:o}}function g(e){return t(e)?e:e.split(".")}function m(e){return t(e)?e.join("."):e}var w={isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(t,e)=>t.score===e.score?t.idx<e.idx?-1:1:t.score<e.score?-1:1,includeMatches:!1,findAllMatches:!1,minMatchCharLength:1,location:0,threshold:.6,distance:100,...{useExtendedSearch:!1,getFn:function(e,a){let l=[],h=!1;const c=(e,a,d)=>{if(o(e))if(a[d]){const u=e[a[d]];if(!o(u))return;if(d===a.length-1&&(s(u)||r(u)||i(u)))l.push(n(u));else if(t(u)){h=!0;for(let t=0,e=u.length;t<e;t+=1)c(u[t],a,d+1)}else a.length&&c(u,a,d+1)}else l.push(e)};return c(e,s(a)?a.split("."):a,0),h?l:l[0]},ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1}};const b=/[^ ]+/g;class y{constructor({getFn:t=w.getFn,fieldNormWeight:e=w.fieldNormWeight}={}){this.norm=function(t=1,e=3){const n=new Map,s=Math.pow(10,e);return{get(e){const r=e.match(b).length;if(n.has(r))return n.get(r);const i=1/Math.pow(r,.5*t),a=parseFloat(Math.round(i*s)/s);return n.set(r,a),a},clear(){n.clear()}}}(e,3),this.getFn=t,this.isCreated=!1,this.setIndexRecords()}setSources(t=[]){this.docs=t}setIndexRecords(t=[]){this.records=t}setKeys(t=[]){this.keys=t,this._keysMap={},t.forEach(((t,e)=>{this._keysMap[t.id]=e}))}create(){!this.isCreated&&this.docs.length&&(this.isCreated=!0,s(this.docs[0])?this.docs.forEach(((t,e)=>{this._addString(t,e)})):this.docs.forEach(((t,e)=>{this._addObject(t,e)})),this.norm.clear())}add(t){const e=this.size();s(t)?this._addString(t,e):this._addObject(t,e)}removeAt(t){this.records.splice(t,1);for(let e=t,n=this.size();e<n;e+=1)this.records[e].i-=1}getValueForItemAtKeyId(t,e){return t[this._keysMap[e]]}size(){return this.records.length}_addString(t,e){if(!o(t)||l(t))return;let n={v:t,i:e,n:this.norm.get(t)};this.records.push(n)}_addObject(e,n){let r={i:n,$:{}};this.keys.forEach(((n,i)=>{let a=n.getFn?n.getFn(e):this.getFn(e,n.path);if(o(a))if(t(a)){let e=[];const n=[{nestedArrIndex:-1,value:a}];for(;n.length;){const{nestedArrIndex:r,value:i}=n.pop();if(o(i))if(s(i)&&!l(i)){let t={v:i,i:r,n:this.norm.get(i)};e.push(t)}else t(i)&&i.forEach(((t,e)=>{n.push({nestedArrIndex:e,value:t})}))}r.$[i]=e}else if(s(a)&&!l(a)){let t={v:a,n:this.norm.get(a)};r.$[i]=t}})),this.records.push(r)}toJSON(){return{keys:this.keys,records:this.records}}}function v(t,e,{getFn:n=w.getFn,fieldNormWeight:s=w.fieldNormWeight}={}){const r=new y({getFn:n,fieldNormWeight:s});return r.setKeys(t.map(p)),r.setSources(e),r.create(),r}function k(t,{errors:e=0,currentLocation:n=0,expectedLocation:s=0,distance:r=w.distance,ignoreLocation:i=w.ignoreLocation}={}){const a=e/t.length;if(i)return a;const o=Math.abs(s-n);return r?a+o/r:o?1:a}const x=32;function z(t,e,n,{location:s=w.location,distance:r=w.distance,threshold:i=w.threshold,findAllMatches:a=w.findAllMatches,minMatchCharLength:o=w.minMatchCharLength,includeMatches:l=w.includeMatches,ignoreLocation:h=w.ignoreLocation}={}){if(e.length>x)throw new Error(`Pattern length exceeds max of ${x}.`);const c=e.length,d=t.length,u=Math.max(0,Math.min(s,d));let f=i,p=u;const g=o>1||l,m=g?Array(d):[];let b;for(;(b=t.indexOf(e,p))>-1;){let t=k(e,{currentLocation:b,expectedLocation:u,distance:r,ignoreLocation:h});if(f=Math.min(t,f),p=b+c,g){let t=0;for(;t<c;)m[b+t]=1,t+=1}}p=-1;let y=[],v=1,z=c+d;const S=1<<c-1;for(let s=0;s<c;s+=1){let i=0,o=z;for(;i<o;){k(e,{errors:s,currentLocation:u+o,expectedLocation:u,distance:r,ignoreLocation:h})<=f?i=o:z=o,o=Math.floor((z-i)/2+i)}z=o;let l=Math.max(1,u-o+1),w=a?d:Math.min(u+o,d)+c,b=Array(w+2);b[w+1]=(1<<s)-1;for(let i=w;i>=l;i-=1){let a=i-1,o=n[t.charAt(a)];if(g&&(m[a]=+!!o),b[i]=(b[i+1]<<1|1)&o,s&&(b[i]|=(y[i+1]|y[i])<<1|1|y[i+1]),b[i]&S&&(v=k(e,{errors:s,currentLocation:a,expectedLocation:u,distance:r,ignoreLocation:h}),v<=f)){if(f=v,p=a,p<=u)break;l=Math.max(1,2*u-p)}}if(k(e,{errors:s+1,currentLocation:u,expectedLocation:u,distance:r,ignoreLocation:h})>f)break;y=b}const Z={isMatch:p>=0,score:Math.max(.001,v)};if(g){const t=function(t=[],e=w.minMatchCharLength){let n=[],s=-1,r=-1,i=0;for(let a=t.length;i<a;i+=1){let a=t[i];a&&-1===s?s=i:a||-1===s||(r=i-1,r-s+1>=e&&n.push([s,r]),s=-1)}return t[i-1]&&i-s>=e&&n.push([s,i-1]),n}(m,o);t.length?l&&(Z.indices=t):Z.isMatch=!1}return Z}function S(t){let e={};for(let n=0,s=t.length;n<s;n+=1){const r=t.charAt(n);e[r]=(e[r]||0)|1<<s-n-1}return e}class Z{constructor(t,{location:e=w.location,threshold:n=w.threshold,distance:s=w.distance,includeMatches:r=w.includeMatches,findAllMatches:i=w.findAllMatches,minMatchCharLength:a=w.minMatchCharLength,isCaseSensitive:o=w.isCaseSensitive,ignoreLocation:l=w.ignoreLocation}={}){if(this.options={location:e,threshold:n,distance:s,includeMatches:r,findAllMatches:i,minMatchCharLength:a,isCaseSensitive:o,ignoreLocation:l},this.pattern=o?t:t.toLowerCase(),this.chunks=[],!this.pattern.length)return;const h=(t,e)=>{this.chunks.push({pattern:t,alphabet:S(t),startIndex:e})},c=this.pattern.length;if(c>x){let t=0;const e=c%x,n=c-e;for(;t<n;)h(this.pattern.substr(t,x),t),t+=x;if(e){const t=c-x;h(this.pattern.substr(t),t)}}else h(this.pattern,0)}searchIn(t){const{isCaseSensitive:e,includeMatches:n}=this.options;if(e||(t=t.toLowerCase()),this.pattern===t){let e={isMatch:!0,score:0};return n&&(e.indices=[[0,t.length-1]]),e}const{location:s,distance:r,threshold:i,findAllMatches:a,minMatchCharLength:o,ignoreLocation:l}=this.options;let h=[],c=0,d=!1;this.chunks.forEach((({pattern:e,alphabet:u,startIndex:f})=>{const{isMatch:p,score:g,indices:m}=z(t,e,u,{location:s+f,distance:r,threshold:i,findAllMatches:a,minMatchCharLength:o,includeMatches:n,ignoreLocation:l});p&&(d=!0),c+=g,p&&m&&(h=[...h,...m])}));let u={isMatch:d,score:d?c/this.chunks.length:1};return d&&n&&(u.indices=h),u}}class M{constructor(t){this.pattern=t}static isMultiMatch(t){return R(t,this.multiRegex)}static isSingleMatch(t){return R(t,this.singleRegex)}search(){}}function R(t,e){const n=t.match(e);return n?n[1]:null}class T extends M{constructor(t,{location:e=w.location,threshold:n=w.threshold,distance:s=w.distance,includeMatches:r=w.includeMatches,findAllMatches:i=w.findAllMatches,minMatchCharLength:a=w.minMatchCharLength,isCaseSensitive:o=w.isCaseSensitive,ignoreLocation:l=w.ignoreLocation}={}){super(t),this._bitapSearch=new Z(t,{location:e,threshold:n,distance:s,includeMatches:r,findAllMatches:i,minMatchCharLength:a,isCaseSensitive:o,ignoreLocation:l})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(t){return this._bitapSearch.searchIn(t)}}class E extends M{constructor(t){super(t)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(t){let e,n=0;const s=[],r=this.pattern.length;for(;(e=t.indexOf(this.pattern,n))>-1;)n=e+r,s.push([e,n-1]);const i=!!s.length;return{isMatch:i,score:i?0:1,indices:s}}}const B=[class extends M{constructor(t){super(t)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(t){const e=t===this.pattern;return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},E,class extends M{constructor(t){super(t)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(t){const e=t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},class extends M{constructor(t){super(t)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(t){const e=!t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends M{constructor(t){super(t)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(t){const e=!t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends M{constructor(t){super(t)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(t){const e=t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[t.length-this.pattern.length,t.length-1]}}},class extends M{constructor(t){super(t)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(t){const e=-1===t.indexOf(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},T],O=B.length,W=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;const I=new Set([T.type,E.type]);class A{constructor(t,{isCaseSensitive:e=w.isCaseSensitive,includeMatches:n=w.includeMatches,minMatchCharLength:s=w.minMatchCharLength,ignoreLocation:r=w.ignoreLocation,findAllMatches:i=w.findAllMatches,location:a=w.location,threshold:o=w.threshold,distance:l=w.distance}={}){this.query=null,this.options={isCaseSensitive:e,includeMatches:n,minMatchCharLength:s,findAllMatches:i,ignoreLocation:r,location:a,threshold:o,distance:l},this.pattern=e?t:t.toLowerCase(),this.query=function(t,e={}){return t.split("|").map((t=>{let n=t.trim().split(W).filter((t=>t&&!!t.trim())),s=[];for(let t=0,r=n.length;t<r;t+=1){const r=n[t];let i=!1,a=-1;for(;!i&&++a<O;){const t=B[a];let n=t.isMultiMatch(r);n&&(s.push(new t(n,e)),i=!0)}if(!i)for(a=-1;++a<O;){const t=B[a];let n=t.isSingleMatch(r);if(n){s.push(new t(n,e));break}}}return s}))}(this.pattern,this.options)}static condition(t,e){return e.useExtendedSearch}searchIn(t){const e=this.query;if(!e)return{isMatch:!1,score:1};const{includeMatches:n,isCaseSensitive:s}=this.options;t=s?t:t.toLowerCase();let r=0,i=[],a=0;for(let s=0,o=e.length;s<o;s+=1){const o=e[s];i.length=0,r=0;for(let e=0,s=o.length;e<s;e+=1){const s=o[e],{isMatch:l,indices:h,score:c}=s.search(t);if(!l){a=0,r=0,i.length=0;break}if(r+=1,a+=c,n){const t=s.constructor.type;I.has(t)?i=[...i,...h]:i.push(h)}}if(r){let t={isMatch:!0,score:a/r};return n&&(t.indices=i),t}}return{isMatch:!1,score:1}}}const U=[];function q(t,e){for(let n=0,s=U.length;n<s;n+=1){let s=U[n];if(s.condition(t,e))return new s(t,e)}return new Z(t,e)}const J="$and",F="$or",L="$path",N="$val",K=t=>!(!t[J]&&!t[F]),Y=t=>({[J]:Object.keys(t).map((e=>({[e]:t[e]})))});function j(e,n,{auto:r=!0}={}){const i=e=>{let o=Object.keys(e);const l=(t=>!!t[L])(e);if(!l&&o.length>1&&!K(e))return i(Y(e));if((e=>!t(e)&&a(e)&&!K(e))(e)){const t=l?e[L]:o[0],i=l?e[N]:e[t];if(!s(i))throw new Error((t=>`Invalid value for key ${t}`)(t));const a={keyId:m(t),pattern:i};return r&&(a.searcher=q(i,n)),a}let h={children:[],operator:o[0]};return o.forEach((n=>{const s=e[n];t(s)&&s.forEach((t=>{h.children.push(i(t))}))})),h};return K(e)||(e=Y(e)),i(e)}function P(t,e){const n=t.matches;e.matches=[],o(n)&&n.forEach((t=>{if(!o(t.indices)||!t.indices.length)return;const{indices:n,value:s}=t;let r={indices:n,value:s};t.key&&(r.key=t.key.src),t.idx>-1&&(r.refIndex=t.idx),e.matches.push(r)}))}function C(t,e){e.score=t.score}class V{constructor(t,e={},n){this.options={...w,...e},this.options.useExtendedSearch,this._keyStore=new f(this.options.keys),this.setCollection(t,n)}setCollection(t,e){if(this._docs=t,e&&!(e instanceof y))throw new Error("Incorrect 'index' type");this._myIndex=e||v(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(t){o(t)&&(this._docs.push(t),this._myIndex.add(t))}remove(t=()=>!1){const e=[];for(let n=0,s=this._docs.length;n<s;n+=1){const r=this._docs[n];t(r,n)&&(this.removeAt(n),n-=1,s-=1,e.push(r))}return e}removeAt(t){this._docs.splice(t,1),this._myIndex.removeAt(t)}getIndex(){return this._myIndex}search(t,{limit:e=-1}={}){const{includeMatches:n,includeScore:i,shouldSort:a,sortFn:o,ignoreFieldNorm:l}=this.options;let h=s(t)?s(this._docs[0])?this._searchStringList(t):this._searchObjectList(t):this._searchLogical(t);return function(t,{ignoreFieldNorm:e=w.ignoreFieldNorm}){t.forEach((t=>{let n=1;t.matches.forEach((({key:t,norm:s,score:r})=>{const i=t?t.weight:null;n*=Math.pow(0===r&&i?Number.EPSILON:r,(i||1)*(e?1:s))})),t.score=n}))}(h,{ignoreFieldNorm:l}),a&&h.sort(o),r(e)&&e>-1&&(h=h.slice(0,e)),function(t,e,{includeMatches:n=w.includeMatches,includeScore:s=w.includeScore}={}){const r=[];return n&&r.push(P),s&&r.push(C),t.map((t=>{const{idx:n}=t,s={item:e[n],refIndex:n};return r.length&&r.forEach((e=>{e(t,s)})),s}))}(h,this._docs,{includeMatches:n,includeScore:i})}_searchStringList(t){const e=q(t,this.options),{records:n}=this._myIndex,s=[];return n.forEach((({v:t,i:n,n:r})=>{if(!o(t))return;const{isMatch:i,score:a,indices:l}=e.searchIn(t);i&&s.push({item:t,idx:n,matches:[{score:a,value:t,norm:r,indices:l}]})})),s}_searchLogical(t){const e=j(t,this.options),n=(t,e,s)=>{if(!t.children){const{keyId:n,searcher:r}=t,i=this._findMatches({key:this._keyStore.get(n),value:this._myIndex.getValueForItemAtKeyId(e,n),searcher:r});return i&&i.length?[{idx:s,item:e,matches:i}]:[]}const r=[];for(let i=0,a=t.children.length;i<a;i+=1){const a=t.children[i],o=n(a,e,s);if(o.length)r.push(...o);else if(t.operator===J)return[]}return r},s=this._myIndex.records,r={},i=[];return s.forEach((({$:t,i:s})=>{if(o(t)){let a=n(e,t,s);a.length&&(r[s]||(r[s]={idx:s,item:t,matches:[]},i.push(r[s])),a.forEach((({matches:t})=>{r[s].matches.push(...t)})))}})),i}_searchObjectList(t){const e=q(t,this.options),{keys:n,records:s}=this._myIndex,r=[];return s.forEach((({$:t,i:s})=>{if(!o(t))return;let i=[];n.forEach(((n,s)=>{i.push(...this._findMatches({key:n,value:t[s],searcher:e}))})),i.length&&r.push({idx:s,item:t,matches:i})})),r}_findMatches({key:e,value:n,searcher:s}){if(!o(n))return[];let r=[];if(t(n))n.forEach((({v:t,i:n,n:i})=>{if(!o(t))return;const{isMatch:a,score:l,indices:h}=s.searchIn(t);a&&r.push({score:l,key:e,value:t,idx:n,norm:i,indices:h})}));else{const{v:t,n:i}=n,{isMatch:a,score:o,indices:l}=s.searchIn(t);a&&r.push({score:o,key:e,value:t,norm:i,indices:l})}return r}}V.version="7.0.0",V.createIndex=v,V.parseIndex=function(t,{getFn:e=w.getFn,fieldNormWeight:n=w.fieldNormWeight}={}){const{keys:s,records:r}=t,i=new y({getFn:e,fieldNormWeight:n});return i.setKeys(s),i.setIndexRecords(r),i},V.config=w,V.parseQuery=j,function(...t){U.push(...t)}(A);function X(t){let e=t.length;for(;--e>=0;)t[e]=0}const D=256,G=286,H=30,Q=15,_=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),$=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),tt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),et=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),nt=new Array(576);X(nt);const st=new Array(60);X(st);const rt=new Array(512);X(rt);const it=new Array(256);X(it);const at=new Array(29);X(at);const ot=new Array(H);function lt(t,e,n,s,r){this.static_tree=t,this.extra_bits=e,this.extra_base=n,this.elems=s,this.max_length=r,this.has_stree=t&&t.length}let ht,ct,dt;function ut(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}X(ot);const ft=t=>t<256?rt[t]:rt[256+(t>>>7)],pt=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},gt=(t,e,n)=>{t.bi_valid>16-n?(t.bi_buf|=e<<t.bi_valid&65535,pt(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=n-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=n)},mt=(t,e,n)=>{gt(t,n[2*e],n[2*e+1])},wt=(t,e)=>{let n=0;do{n|=1&t,t>>>=1,n<<=1}while(--e>0);return n>>>1},bt=(t,e,n)=>{const s=new Array(16);let r,i,a=0;for(r=1;r<=Q;r++)a=a+n[r-1]<<1,s[r]=a;for(i=0;i<=e;i++){let e=t[2*i+1];0!==e&&(t[2*i]=wt(s[e]++,e))}},yt=t=>{let e;for(e=0;e<G;e++)t.dyn_ltree[2*e]=0;for(e=0;e<H;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},vt=t=>{t.bi_valid>8?pt(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},kt=(t,e,n,s)=>{const r=2*e,i=2*n;return t[r]<t[i]||t[r]===t[i]&&s[e]<=s[n]},xt=(t,e,n)=>{const s=t.heap[n];let r=n<<1;for(;r<=t.heap_len&&(r<t.heap_len&&kt(e,t.heap[r+1],t.heap[r],t.depth)&&r++,!kt(e,s,t.heap[r],t.depth));)t.heap[n]=t.heap[r],n=r,r<<=1;t.heap[n]=s},zt=(t,e,n)=>{let s,r,i,a,o=0;if(0!==t.sym_next)do{s=255&t.pending_buf[t.sym_buf+o++],s+=(255&t.pending_buf[t.sym_buf+o++])<<8,r=t.pending_buf[t.sym_buf+o++],0===s?mt(t,r,e):(i=it[r],mt(t,i+D+1,e),a=_[i],0!==a&&(r-=at[i],gt(t,r,a)),s--,i=ft(s),mt(t,i,n),a=$[i],0!==a&&(s-=ot[i],gt(t,s,a)))}while(o<t.sym_next);mt(t,256,e)},St=(t,e)=>{const n=e.dyn_tree,s=e.stat_desc.static_tree,r=e.stat_desc.has_stree,i=e.stat_desc.elems;let a,o,l,h=-1;for(t.heap_len=0,t.heap_max=573,a=0;a<i;a++)0!==n[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):n[2*a+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,n[2*l]=1,t.depth[l]=0,t.opt_len--,r&&(t.static_len-=s[2*l+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)xt(t,n,a);l=i;do{a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],xt(t,n,1),o=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=o,n[2*l]=n[2*a]+n[2*o],t.depth[l]=(t.depth[a]>=t.depth[o]?t.depth[a]:t.depth[o])+1,n[2*a+1]=n[2*o+1]=l,t.heap[1]=l++,xt(t,n,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const n=e.dyn_tree,s=e.max_code,r=e.stat_desc.static_tree,i=e.stat_desc.has_stree,a=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,c,d,u,f,p,g=0;for(u=0;u<=Q;u++)t.bl_count[u]=0;for(n[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)c=t.heap[h],u=n[2*n[2*c+1]+1]+1,u>l&&(u=l,g++),n[2*c+1]=u,c>s||(t.bl_count[u]++,f=0,c>=o&&(f=a[c-o]),p=n[2*c],t.opt_len+=p*(u+f),i&&(t.static_len+=p*(r[2*c+1]+f)));if(0!==g){do{for(u=l-1;0===t.bl_count[u];)u--;t.bl_count[u]--,t.bl_count[u+1]+=2,t.bl_count[l]--,g-=2}while(g>0);for(u=l;0!==u;u--)for(c=t.bl_count[u];0!==c;)d=t.heap[--h],d>s||(n[2*d+1]!==u&&(t.opt_len+=(u-n[2*d+1])*n[2*d],n[2*d+1]=u),c--)}})(t,e),bt(n,h,t.bl_count)},Zt=(t,e,n)=>{let s,r,i=-1,a=e[1],o=0,l=7,h=4;for(0===a&&(l=138,h=3),e[2*(n+1)+1]=65535,s=0;s<=n;s++)r=a,a=e[2*(s+1)+1],++o<l&&r===a||(o<h?t.bl_tree[2*r]+=o:0!==r?(r!==i&&t.bl_tree[2*r]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,i=r,0===a?(l=138,h=3):r===a?(l=6,h=3):(l=7,h=4))},Mt=(t,e,n)=>{let s,r,i=-1,a=e[1],o=0,l=7,h=4;for(0===a&&(l=138,h=3),s=0;s<=n;s++)if(r=a,a=e[2*(s+1)+1],!(++o<l&&r===a)){if(o<h)do{mt(t,r,t.bl_tree)}while(0!=--o);else 0!==r?(r!==i&&(mt(t,r,t.bl_tree),o--),mt(t,16,t.bl_tree),gt(t,o-3,2)):o<=10?(mt(t,17,t.bl_tree),gt(t,o-3,3)):(mt(t,18,t.bl_tree),gt(t,o-11,7));o=0,i=r,0===a?(l=138,h=3):r===a?(l=6,h=3):(l=7,h=4)}};let Rt=!1;const Tt=(t,e,n,s)=>{gt(t,0+(s?1:0),3),vt(t),pt(t,n),pt(t,~n),n&&t.pending_buf.set(t.window.subarray(e,e+n),t.pending),t.pending+=n};var Et=(t,e,n,s)=>{let r,i,a=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,n=4093624447;for(e=0;e<=31;e++,n>>>=1)if(1&n&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<D;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),St(t,t.l_desc),St(t,t.d_desc),a=(t=>{let e;for(Zt(t,t.dyn_ltree,t.l_desc.max_code),Zt(t,t.dyn_dtree,t.d_desc.max_code),St(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*et[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),r=t.opt_len+3+7>>>3,i=t.static_len+3+7>>>3,i<=r&&(r=i)):r=i=n+5,n+4<=r&&-1!==e?Tt(t,e,n,s):4===t.strategy||i===r?(gt(t,2+(s?1:0),3),zt(t,nt,st)):(gt(t,4+(s?1:0),3),((t,e,n,s)=>{let r;for(gt(t,e-257,5),gt(t,n-1,5),gt(t,s-4,4),r=0;r<s;r++)gt(t,t.bl_tree[2*et[r]+1],3);Mt(t,t.dyn_ltree,e-1),Mt(t,t.dyn_dtree,n-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),zt(t,t.dyn_ltree,t.dyn_dtree)),yt(t),s&&vt(t)},Bt={_tr_init:t=>{Rt||((()=>{let t,e,n,s,r;const i=new Array(16);for(n=0,s=0;s<28;s++)for(at[s]=n,t=0;t<1<<_[s];t++)it[n++]=s;for(it[n-1]=s,r=0,s=0;s<16;s++)for(ot[s]=r,t=0;t<1<<$[s];t++)rt[r++]=s;for(r>>=7;s<H;s++)for(ot[s]=r<<7,t=0;t<1<<$[s]-7;t++)rt[256+r++]=s;for(e=0;e<=Q;e++)i[e]=0;for(t=0;t<=143;)nt[2*t+1]=8,t++,i[8]++;for(;t<=255;)nt[2*t+1]=9,t++,i[9]++;for(;t<=279;)nt[2*t+1]=7,t++,i[7]++;for(;t<=287;)nt[2*t+1]=8,t++,i[8]++;for(bt(nt,287,i),t=0;t<H;t++)st[2*t+1]=5,st[2*t]=wt(t,5);ht=new lt(nt,_,257,G,Q),ct=new lt(st,$,0,H,Q),dt=new lt(new Array(0),tt,0,19,7)})(),Rt=!0),t.l_desc=new ut(t.dyn_ltree,ht),t.d_desc=new ut(t.dyn_dtree,ct),t.bl_desc=new ut(t.bl_tree,dt),t.bi_buf=0,t.bi_valid=0,yt(t)},_tr_stored_block:Tt,_tr_flush_block:Et,_tr_tally:(t,e,n)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=n,0===e?t.dyn_ltree[2*n]++:(t.matches++,e--,t.dyn_ltree[2*(it[n]+D+1)]++,t.dyn_dtree[2*ft(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{gt(t,2,3),mt(t,256,nt),(t=>{16===t.bi_valid?(pt(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var Ot=(t,e,n,s)=>{let r=65535&t,i=t>>>16&65535,a=0;for(;0!==n;){a=n>2e3?2e3:n,n-=a;do{r=r+e[s++]|0,i=i+r|0}while(--a);r%=65521,i%=65521}return r|i<<16};const Wt=new Uint32Array((()=>{let t,e=[];for(var n=0;n<256;n++){t=n;for(var s=0;s<8;s++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e})());var It=(t,e,n,s)=>{const r=Wt,i=s+n;t^=-1;for(let n=s;n<i;n++)t=t>>>8^r[255&(t^e[n])];return~t},At={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Ut={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:qt,_tr_stored_block:Jt,_tr_flush_block:Ft,_tr_tally:Lt,_tr_align:Nt}=Bt,{Z_NO_FLUSH:Kt,Z_PARTIAL_FLUSH:Yt,Z_FULL_FLUSH:jt,Z_FINISH:Pt,Z_BLOCK:Ct,Z_OK:Vt,Z_STREAM_END:Xt,Z_STREAM_ERROR:Dt,Z_DATA_ERROR:Gt,Z_BUF_ERROR:Ht,Z_DEFAULT_COMPRESSION:Qt,Z_FILTERED:_t,Z_HUFFMAN_ONLY:$t,Z_RLE:te,Z_FIXED:ee,Z_DEFAULT_STRATEGY:ne,Z_UNKNOWN:se,Z_DEFLATED:re}=Ut,ie=258,ae=262,oe=42,le=113,he=666,ce=(t,e)=>(t.msg=At[e],e),de=t=>2*t-(t>4?9:0),ue=t=>{let e=t.length;for(;--e>=0;)t[e]=0},fe=t=>{let e,n,s,r=t.w_size;e=t.hash_size,s=e;do{n=t.head[--s],t.head[s]=n>=r?n-r:0}while(--e);e=r,s=e;do{n=t.prev[--s],t.prev[s]=n>=r?n-r:0}while(--e)};let pe=(t,e,n)=>(e<<t.hash_shift^n)&t.hash_mask;const ge=t=>{const e=t.state;let n=e.pending;n>t.avail_out&&(n=t.avail_out),0!==n&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+n),t.next_out),t.next_out+=n,e.pending_out+=n,t.total_out+=n,t.avail_out-=n,e.pending-=n,0===e.pending&&(e.pending_out=0))},me=(t,e)=>{Ft(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,ge(t.strm)},we=(t,e)=>{t.pending_buf[t.pending++]=e},be=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},ye=(t,e,n,s)=>{let r=t.avail_in;return r>s&&(r=s),0===r?0:(t.avail_in-=r,e.set(t.input.subarray(t.next_in,t.next_in+r),n),1===t.state.wrap?t.adler=Ot(t.adler,e,r,n):2===t.state.wrap&&(t.adler=It(t.adler,e,r,n)),t.next_in+=r,t.total_in+=r,r)},ve=(t,e)=>{let n,s,r=t.max_chain_length,i=t.strstart,a=t.prev_length,o=t.nice_match;const l=t.strstart>t.w_size-ae?t.strstart-(t.w_size-ae):0,h=t.window,c=t.w_mask,d=t.prev,u=t.strstart+ie;let f=h[i+a-1],p=h[i+a];t.prev_length>=t.good_match&&(r>>=2),o>t.lookahead&&(o=t.lookahead);do{if(n=e,h[n+a]===p&&h[n+a-1]===f&&h[n]===h[i]&&h[++n]===h[i+1]){i+=2,n++;do{}while(h[++i]===h[++n]&&h[++i]===h[++n]&&h[++i]===h[++n]&&h[++i]===h[++n]&&h[++i]===h[++n]&&h[++i]===h[++n]&&h[++i]===h[++n]&&h[++i]===h[++n]&&i<u);if(s=ie-(u-i),i=u-ie,s>a){if(t.match_start=e,a=s,s>=o)break;f=h[i+a-1],p=h[i+a]}}}while((e=d[e&c])>l&&0!=--r);return a<=t.lookahead?a:t.lookahead},ke=t=>{const e=t.w_size;let n,s,r;do{if(s=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-ae)&&(t.window.set(t.window.subarray(e,e+e-s),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),fe(t),s+=e),0===t.strm.avail_in)break;if(n=ye(t.strm,t.window,t.strstart+t.lookahead,s),t.lookahead+=n,t.lookahead+t.insert>=3)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=pe(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=pe(t,t.ins_h,t.window[r+3-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<ae&&0!==t.strm.avail_in)},xe=(t,e)=>{let n,s,r,i=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,a=0,o=t.strm.avail_in;do{if(n=65535,r=t.bi_valid+42>>3,t.strm.avail_out<r)break;if(r=t.strm.avail_out-r,s=t.strstart-t.block_start,n>s+t.strm.avail_in&&(n=s+t.strm.avail_in),n>r&&(n=r),n<i&&(0===n&&e!==Pt||e===Kt||n!==s+t.strm.avail_in))break;a=e===Pt&&n===s+t.strm.avail_in?1:0,Jt(t,0,0,a),t.pending_buf[t.pending-4]=n,t.pending_buf[t.pending-3]=n>>8,t.pending_buf[t.pending-2]=~n,t.pending_buf[t.pending-1]=~n>>8,ge(t.strm),s&&(s>n&&(s=n),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+s),t.strm.next_out),t.strm.next_out+=s,t.strm.avail_out-=s,t.strm.total_out+=s,t.block_start+=s,n-=s),n&&(ye(t.strm,t.strm.output,t.strm.next_out,n),t.strm.next_out+=n,t.strm.avail_out-=n,t.strm.total_out+=n)}while(0===a);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),a?4:e!==Kt&&e!==Pt&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(r=t.window_size-t.strstart,t.strm.avail_in>r&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,r+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),r>t.strm.avail_in&&(r=t.strm.avail_in),r&&(ye(t.strm,t.window,t.strstart,r),t.strstart+=r,t.insert+=r>t.w_size-t.insert?t.w_size-t.insert:r),t.high_water<t.strstart&&(t.high_water=t.strstart),r=t.bi_valid+42>>3,r=t.pending_buf_size-r>65535?65535:t.pending_buf_size-r,i=r>t.w_size?t.w_size:r,s=t.strstart-t.block_start,(s>=i||(s||e===Pt)&&e!==Kt&&0===t.strm.avail_in&&s<=r)&&(n=s>r?r:s,a=e===Pt&&0===t.strm.avail_in&&n===s?1:0,Jt(t,t.block_start,n,a),t.block_start+=n,ge(t.strm)),a?3:1)},ze=(t,e)=>{let n,s;for(;;){if(t.lookahead<ae){if(ke(t),t.lookahead<ae&&e===Kt)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=3&&(t.ins_h=pe(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==n&&t.strstart-n<=t.w_size-ae&&(t.match_length=ve(t,n)),t.match_length>=3)if(s=Lt(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=pe(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=pe(t,t.ins_h,t.window[t.strstart+1]);else s=Lt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(s&&(me(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===Pt?(me(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(me(t,!1),0===t.strm.avail_out)?1:2},Se=(t,e)=>{let n,s,r;for(;;){if(t.lookahead<ae){if(ke(t),t.lookahead<ae&&e===Kt)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=3&&(t.ins_h=pe(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==n&&t.prev_length<t.max_lazy_match&&t.strstart-n<=t.w_size-ae&&(t.match_length=ve(t,n),t.match_length<=5&&(t.strategy===_t||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){r=t.strstart+t.lookahead-3,s=Lt(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=r&&(t.ins_h=pe(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,s&&(me(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(s=Lt(t,0,t.window[t.strstart-1]),s&&me(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(s=Lt(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===Pt?(me(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(me(t,!1),0===t.strm.avail_out)?1:2};function Ze(t,e,n,s,r){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=s,this.func=r}const Me=[new Ze(0,0,0,0,xe),new Ze(4,4,8,4,ze),new Ze(4,5,16,8,ze),new Ze(4,6,32,32,ze),new Ze(4,4,16,16,Se),new Ze(8,16,32,32,Se),new Ze(8,16,128,128,Se),new Ze(8,32,128,256,Se),new Ze(32,128,258,1024,Se),new Ze(32,258,258,4096,Se)];function Re(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=re,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),ue(this.dyn_ltree),ue(this.dyn_dtree),ue(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),ue(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),ue(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Te=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.status!==oe&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&e.status!==le&&e.status!==he?1:0},Ee=t=>{if(Te(t))return ce(t,Dt);t.total_in=t.total_out=0,t.data_type=se;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?oe:le,t.adler=2===e.wrap?0:1,e.last_flush=-2,qt(e),Vt},Be=t=>{const e=Ee(t);var n;return e===Vt&&((n=t.state).window_size=2*n.w_size,ue(n.head),n.max_lazy_match=Me[n.level].max_lazy,n.good_match=Me[n.level].good_length,n.nice_match=Me[n.level].nice_length,n.max_chain_length=Me[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=2,n.match_available=0,n.ins_h=0),e},Oe=(t,e,n,s,r,i)=>{if(!t)return Dt;let a=1;if(e===Qt&&(e=6),s<0?(a=0,s=-s):s>15&&(a=2,s-=16),r<1||r>9||n!==re||s<8||s>15||e<0||e>9||i<0||i>ee||8===s&&1!==a)return ce(t,Dt);8===s&&(s=9);const o=new Re;return t.state=o,o.strm=t,o.status=oe,o.wrap=a,o.gzhead=null,o.w_bits=s,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=r+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<r+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=e,o.strategy=i,o.method=n,Be(t)};var We={deflateInit:(t,e)=>Oe(t,e,re,15,8,ne),deflateInit2:Oe,deflateReset:Be,deflateResetKeep:Ee,deflateSetHeader:(t,e)=>Te(t)||2!==t.state.wrap?Dt:(t.state.gzhead=e,Vt),deflate:(t,e)=>{if(Te(t)||e>Ct||e<0)return t?ce(t,Dt):Dt;const n=t.state;if(!t.output||0!==t.avail_in&&!t.input||n.status===he&&e!==Pt)return ce(t,0===t.avail_out?Ht:Dt);const s=n.last_flush;if(n.last_flush=e,0!==n.pending){if(ge(t),0===t.avail_out)return n.last_flush=-1,Vt}else if(0===t.avail_in&&de(e)<=de(s)&&e!==Pt)return ce(t,Ht);if(n.status===he&&0!==t.avail_in)return ce(t,Ht);if(n.status===oe&&0===n.wrap&&(n.status=le),n.status===oe){let e=re+(n.w_bits-8<<4)<<8,s=-1;if(s=n.strategy>=$t||n.level<2?0:n.level<6?1:6===n.level?2:3,e|=s<<6,0!==n.strstart&&(e|=32),e+=31-e%31,be(n,e),0!==n.strstart&&(be(n,t.adler>>>16),be(n,65535&t.adler)),t.adler=1,n.status=le,ge(t),0!==n.pending)return n.last_flush=-1,Vt}if(57===n.status)if(t.adler=0,we(n,31),we(n,139),we(n,8),n.gzhead)we(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),we(n,255&n.gzhead.time),we(n,n.gzhead.time>>8&255),we(n,n.gzhead.time>>16&255),we(n,n.gzhead.time>>24&255),we(n,9===n.level?2:n.strategy>=$t||n.level<2?4:0),we(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(we(n,255&n.gzhead.extra.length),we(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(t.adler=It(t.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69;else if(we(n,0),we(n,0),we(n,0),we(n,0),we(n,0),we(n,9===n.level?2:n.strategy>=$t||n.level<2?4:0),we(n,3),n.status=le,ge(t),0!==n.pending)return n.last_flush=-1,Vt;if(69===n.status){if(n.gzhead.extra){let e=n.pending,s=(65535&n.gzhead.extra.length)-n.gzindex;for(;n.pending+s>n.pending_buf_size;){let r=n.pending_buf_size-n.pending;if(n.pending_buf.set(n.gzhead.extra.subarray(n.gzindex,n.gzindex+r),n.pending),n.pending=n.pending_buf_size,n.gzhead.hcrc&&n.pending>e&&(t.adler=It(t.adler,n.pending_buf,n.pending-e,e)),n.gzindex+=r,ge(t),0!==n.pending)return n.last_flush=-1,Vt;e=0,s-=r}let r=new Uint8Array(n.gzhead.extra);n.pending_buf.set(r.subarray(n.gzindex,n.gzindex+s),n.pending),n.pending+=s,n.gzhead.hcrc&&n.pending>e&&(t.adler=It(t.adler,n.pending_buf,n.pending-e,e)),n.gzindex=0}n.status=73}if(73===n.status){if(n.gzhead.name){let e,s=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>s&&(t.adler=It(t.adler,n.pending_buf,n.pending-s,s)),ge(t),0!==n.pending)return n.last_flush=-1,Vt;s=0}e=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,we(n,e)}while(0!==e);n.gzhead.hcrc&&n.pending>s&&(t.adler=It(t.adler,n.pending_buf,n.pending-s,s)),n.gzindex=0}n.status=91}if(91===n.status){if(n.gzhead.comment){let e,s=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>s&&(t.adler=It(t.adler,n.pending_buf,n.pending-s,s)),ge(t),0!==n.pending)return n.last_flush=-1,Vt;s=0}e=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,we(n,e)}while(0!==e);n.gzhead.hcrc&&n.pending>s&&(t.adler=It(t.adler,n.pending_buf,n.pending-s,s))}n.status=103}if(103===n.status){if(n.gzhead.hcrc){if(n.pending+2>n.pending_buf_size&&(ge(t),0!==n.pending))return n.last_flush=-1,Vt;we(n,255&t.adler),we(n,t.adler>>8&255),t.adler=0}if(n.status=le,ge(t),0!==n.pending)return n.last_flush=-1,Vt}if(0!==t.avail_in||0!==n.lookahead||e!==Kt&&n.status!==he){let s=0===n.level?xe(n,e):n.strategy===$t?((t,e)=>{let n;for(;;){if(0===t.lookahead&&(ke(t),0===t.lookahead)){if(e===Kt)return 1;break}if(t.match_length=0,n=Lt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,n&&(me(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===Pt?(me(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(me(t,!1),0===t.strm.avail_out)?1:2})(n,e):n.strategy===te?((t,e)=>{let n,s,r,i;const a=t.window;for(;;){if(t.lookahead<=ie){if(ke(t),t.lookahead<=ie&&e===Kt)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(r=t.strstart-1,s=a[r],s===a[++r]&&s===a[++r]&&s===a[++r])){i=t.strstart+ie;do{}while(s===a[++r]&&s===a[++r]&&s===a[++r]&&s===a[++r]&&s===a[++r]&&s===a[++r]&&s===a[++r]&&s===a[++r]&&r<i);t.match_length=ie-(i-r),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(n=Lt(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(n=Lt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),n&&(me(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===Pt?(me(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(me(t,!1),0===t.strm.avail_out)?1:2})(n,e):Me[n.level].func(n,e);if(3!==s&&4!==s||(n.status=he),1===s||3===s)return 0===t.avail_out&&(n.last_flush=-1),Vt;if(2===s&&(e===Yt?Nt(n):e!==Ct&&(Jt(n,0,0,!1),e===jt&&(ue(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),ge(t),0===t.avail_out))return n.last_flush=-1,Vt}return e!==Pt?Vt:n.wrap<=0?Xt:(2===n.wrap?(we(n,255&t.adler),we(n,t.adler>>8&255),we(n,t.adler>>16&255),we(n,t.adler>>24&255),we(n,255&t.total_in),we(n,t.total_in>>8&255),we(n,t.total_in>>16&255),we(n,t.total_in>>24&255)):(be(n,t.adler>>>16),be(n,65535&t.adler)),ge(t),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?Vt:Xt)},deflateEnd:t=>{if(Te(t))return Dt;const e=t.state.status;return t.state=null,e===le?ce(t,Gt):Vt},deflateSetDictionary:(t,e)=>{let n=e.length;if(Te(t))return Dt;const s=t.state,r=s.wrap;if(2===r||1===r&&s.status!==oe||s.lookahead)return Dt;if(1===r&&(t.adler=Ot(t.adler,e,n,0)),s.wrap=0,n>=s.w_size){0===r&&(ue(s.head),s.strstart=0,s.block_start=0,s.insert=0);let t=new Uint8Array(s.w_size);t.set(e.subarray(n-s.w_size,n),0),e=t,n=s.w_size}const i=t.avail_in,a=t.next_in,o=t.input;for(t.avail_in=n,t.next_in=0,t.input=e,ke(s);s.lookahead>=3;){let t=s.strstart,e=s.lookahead-2;do{s.ins_h=pe(s,s.ins_h,s.window[t+3-1]),s.prev[t&s.w_mask]=s.head[s.ins_h],s.head[s.ins_h]=t,t++}while(--e);s.strstart=t,s.lookahead=2,ke(s)}return s.strstart+=s.lookahead,s.block_start=s.strstart,s.insert=s.lookahead,s.lookahead=0,s.match_length=s.prev_length=2,s.match_available=0,t.next_in=a,t.input=o,t.avail_in=i,s.wrap=r,Vt},deflateInfo:"pako deflate (from Nodeca project)"};const Ie=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Ae={assign:function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const n=e.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(const e in n)Ie(n,e)&&(t[e]=n[e])}}return t},flattenChunks:t=>{let e=0;for(let n=0,s=t.length;n<s;n++)e+=t[n].length;const n=new Uint8Array(e);for(let e=0,s=0,r=t.length;e<r;e++){let r=t[e];n.set(r,s),s+=r.length}return n}};let Ue=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ue=!1}const qe=new Uint8Array(256);for(let t=0;t<256;t++)qe[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;qe[254]=qe[254]=1;var Je={string2buf:t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,n,s,r,i,a=t.length,o=0;for(r=0;r<a;r++)n=t.charCodeAt(r),55296==(64512&n)&&r+1<a&&(s=t.charCodeAt(r+1),56320==(64512&s)&&(n=65536+(n-55296<<10)+(s-56320),r++)),o+=n<128?1:n<2048?2:n<65536?3:4;for(e=new Uint8Array(o),i=0,r=0;i<o;r++)n=t.charCodeAt(r),55296==(64512&n)&&r+1<a&&(s=t.charCodeAt(r+1),56320==(64512&s)&&(n=65536+(n-55296<<10)+(s-56320),r++)),n<128?e[i++]=n:n<2048?(e[i++]=192|n>>>6,e[i++]=128|63&n):n<65536?(e[i++]=224|n>>>12,e[i++]=128|n>>>6&63,e[i++]=128|63&n):(e[i++]=240|n>>>18,e[i++]=128|n>>>12&63,e[i++]=128|n>>>6&63,e[i++]=128|63&n);return e},buf2string:(t,e)=>{const n=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let s,r;const i=new Array(2*n);for(r=0,s=0;s<n;){let e=t[s++];if(e<128){i[r++]=e;continue}let a=qe[e];if(a>4)i[r++]=65533,s+=a-1;else{for(e&=2===a?31:3===a?15:7;a>1&&s<n;)e=e<<6|63&t[s++],a--;a>1?i[r++]=65533:e<65536?i[r++]=e:(e-=65536,i[r++]=55296|e>>10&1023,i[r++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ue)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let n="";for(let s=0;s<e;s++)n+=String.fromCharCode(t[s]);return n})(i,r)},utf8border:(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let n=e-1;for(;n>=0&&128==(192&t[n]);)n--;return n<0||0===n?e:n+qe[t[n]]>e?n:e}};var Fe=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const Le=Object.prototype.toString,{Z_NO_FLUSH:Ne,Z_SYNC_FLUSH:Ke,Z_FULL_FLUSH:Ye,Z_FINISH:je,Z_OK:Pe,Z_STREAM_END:Ce,Z_DEFAULT_COMPRESSION:Ve,Z_DEFAULT_STRATEGY:Xe,Z_DEFLATED:De}=Ut;function Ge(t){this.options=Ae.assign({level:Ve,method:De,chunkSize:16384,windowBits:15,memLevel:8,strategy:Xe},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Fe,this.strm.avail_out=0;let n=We.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(n!==Pe)throw new Error(At[n]);if(e.header&&We.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?Je.string2buf(e.dictionary):"[object ArrayBuffer]"===Le.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,n=We.deflateSetDictionary(this.strm,t),n!==Pe)throw new Error(At[n]);this._dict_set=!0}}function He(t,e){const n=new Ge(e);if(n.push(t,!0),n.err)throw n.msg||At[n.err];return n.result}Ge.prototype.push=function(t,e){const n=this.strm,s=this.options.chunkSize;let r,i;if(this.ended)return!1;for(i=e===~~e?e:!0===e?je:Ne,"string"==typeof t?n.input=Je.string2buf(t):"[object ArrayBuffer]"===Le.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;;)if(0===n.avail_out&&(n.output=new Uint8Array(s),n.next_out=0,n.avail_out=s),(i===Ke||i===Ye)&&n.avail_out<=6)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else{if(r=We.deflate(n,i),r===Ce)return n.next_out>0&&this.onData(n.output.subarray(0,n.next_out)),r=We.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===Pe;if(0!==n.avail_out){if(i>0&&n.next_out>0)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else if(0===n.avail_in)break}else this.onData(n.output)}return!0},Ge.prototype.onData=function(t){this.chunks.push(t)},Ge.prototype.onEnd=function(t){t===Pe&&(this.result=Ae.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var Qe=function(t,e){return(e=e||{}).raw=!0,He(t,e)},_e=function(t,e){return(e=e||{}).gzip=!0,He(t,e)},$e={Deflate:Ge,deflate:He,deflateRaw:Qe,gzip:_e,constants:Ut};const tn=16209;var en=function(t,e){let n,s,r,i,a,o,l,h,c,d,u,f,p,g,m,w,b,y,v,k,x,z,S,Z;const M=t.state;n=t.next_in,S=t.input,s=n+(t.avail_in-5),r=t.next_out,Z=t.output,i=r-(e-t.avail_out),a=r+(t.avail_out-257),o=M.dmax,l=M.wsize,h=M.whave,c=M.wnext,d=M.window,u=M.hold,f=M.bits,p=M.lencode,g=M.distcode,m=(1<<M.lenbits)-1,w=(1<<M.distbits)-1;t:do{f<15&&(u+=S[n++]<<f,f+=8,u+=S[n++]<<f,f+=8),b=p[u&m];e:for(;;){if(y=b>>>24,u>>>=y,f-=y,y=b>>>16&255,0===y)Z[r++]=65535&b;else{if(!(16&y)){if(64&y){if(32&y){M.mode=16191;break t}t.msg="invalid literal/length code",M.mode=tn;break t}b=p[(65535&b)+(u&(1<<y)-1)];continue e}for(v=65535&b,y&=15,y&&(f<y&&(u+=S[n++]<<f,f+=8),v+=u&(1<<y)-1,u>>>=y,f-=y),f<15&&(u+=S[n++]<<f,f+=8,u+=S[n++]<<f,f+=8),b=g[u&w];;){if(y=b>>>24,u>>>=y,f-=y,y=b>>>16&255,16&y){if(k=65535&b,y&=15,f<y&&(u+=S[n++]<<f,f+=8,f<y&&(u+=S[n++]<<f,f+=8)),k+=u&(1<<y)-1,k>o){t.msg="invalid distance too far back",M.mode=tn;break t}if(u>>>=y,f-=y,y=r-i,k>y){if(y=k-y,y>h&&M.sane){t.msg="invalid distance too far back",M.mode=tn;break t}if(x=0,z=d,0===c){if(x+=l-y,y<v){v-=y;do{Z[r++]=d[x++]}while(--y);x=r-k,z=Z}}else if(c<y){if(x+=l+c-y,y-=c,y<v){v-=y;do{Z[r++]=d[x++]}while(--y);if(x=0,c<v){y=c,v-=y;do{Z[r++]=d[x++]}while(--y);x=r-k,z=Z}}}else if(x+=c-y,y<v){v-=y;do{Z[r++]=d[x++]}while(--y);x=r-k,z=Z}for(;v>2;)Z[r++]=z[x++],Z[r++]=z[x++],Z[r++]=z[x++],v-=3;v&&(Z[r++]=z[x++],v>1&&(Z[r++]=z[x++]))}else{x=r-k;do{Z[r++]=Z[x++],Z[r++]=Z[x++],Z[r++]=Z[x++],v-=3}while(v>2);v&&(Z[r++]=Z[x++],v>1&&(Z[r++]=Z[x++]))}break}if(64&y){t.msg="invalid distance code",M.mode=tn;break t}b=g[(65535&b)+(u&(1<<y)-1)]}}break}}while(n<s&&r<a);v=f>>3,n-=v,f-=v<<3,u&=(1<<f)-1,t.next_in=n,t.next_out=r,t.avail_in=n<s?s-n+5:5-(n-s),t.avail_out=r<a?a-r+257:257-(r-a),M.hold=u,M.bits=f};const nn=15,sn=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),rn=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),an=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),on=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var ln=(t,e,n,s,r,i,a,o)=>{const l=o.bits;let h,c,d,u,f,p,g=0,m=0,w=0,b=0,y=0,v=0,k=0,x=0,z=0,S=0,Z=null;const M=new Uint16Array(16),R=new Uint16Array(16);let T,E,B,O=null;for(g=0;g<=nn;g++)M[g]=0;for(m=0;m<s;m++)M[e[n+m]]++;for(y=l,b=nn;b>=1&&0===M[b];b--);if(y>b&&(y=b),0===b)return r[i++]=20971520,r[i++]=20971520,o.bits=1,0;for(w=1;w<b&&0===M[w];w++);for(y<w&&(y=w),x=1,g=1;g<=nn;g++)if(x<<=1,x-=M[g],x<0)return-1;if(x>0&&(0===t||1!==b))return-1;for(R[1]=0,g=1;g<nn;g++)R[g+1]=R[g]+M[g];for(m=0;m<s;m++)0!==e[n+m]&&(a[R[e[n+m]]++]=m);if(0===t?(Z=O=a,p=20):1===t?(Z=sn,O=rn,p=257):(Z=an,O=on,p=0),S=0,m=0,g=w,f=i,v=y,k=0,d=-1,z=1<<y,u=z-1,1===t&&z>852||2===t&&z>592)return 1;for(;;){T=g-k,a[m]+1<p?(E=0,B=a[m]):a[m]>=p?(E=O[a[m]-p],B=Z[a[m]-p]):(E=96,B=0),h=1<<g-k,c=1<<v,w=c;do{c-=h,r[f+(S>>k)+c]=T<<24|E<<16|B}while(0!==c);for(h=1<<g-1;S&h;)h>>=1;if(0!==h?(S&=h-1,S+=h):S=0,m++,0==--M[g]){if(g===b)break;g=e[n+a[m]]}if(g>y&&(S&u)!==d){for(0===k&&(k=y),f+=w,v=g-k,x=1<<v;v+k<b&&(x-=M[v+k],!(x<=0));)v++,x<<=1;if(z+=1<<v,1===t&&z>852||2===t&&z>592)return 1;d=S&u,r[d]=y<<24|v<<16|f-i}}return 0!==S&&(r[f+S]=g-k<<24|64<<16),o.bits=y,0};const{Z_FINISH:hn,Z_BLOCK:cn,Z_TREES:dn,Z_OK:un,Z_STREAM_END:fn,Z_NEED_DICT:pn,Z_STREAM_ERROR:gn,Z_DATA_ERROR:mn,Z_MEM_ERROR:wn,Z_BUF_ERROR:bn,Z_DEFLATED:yn}=Ut,vn=16180,kn=16190,xn=16191,zn=16192,Sn=16194,Zn=16199,Mn=16200,Rn=16206,Tn=16209,En=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function Bn(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const On=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<vn||e.mode>16211?1:0},Wn=t=>{if(On(t))return gn;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=vn,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,un},In=t=>{if(On(t))return gn;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,Wn(t)},An=(t,e)=>{let n;if(On(t))return gn;const s=t.state;return e<0?(n=0,e=-e):(n=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?gn:(null!==s.window&&s.wbits!==e&&(s.window=null),s.wrap=n,s.wbits=e,In(t))},Un=(t,e)=>{if(!t)return gn;const n=new Bn;t.state=n,n.strm=t,n.window=null,n.mode=vn;const s=An(t,e);return s!==un&&(t.state=null),s};let qn,Jn,Fn=!0;const Ln=t=>{if(Fn){qn=new Int32Array(512),Jn=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(ln(1,t.lens,0,288,qn,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;ln(2,t.lens,0,32,Jn,0,t.work,{bits:5}),Fn=!1}t.lencode=qn,t.lenbits=9,t.distcode=Jn,t.distbits=5},Nn=(t,e,n,s)=>{let r;const i=t.state;return null===i.window&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new Uint8Array(i.wsize)),s>=i.wsize?(i.window.set(e.subarray(n-i.wsize,n),0),i.wnext=0,i.whave=i.wsize):(r=i.wsize-i.wnext,r>s&&(r=s),i.window.set(e.subarray(n-s,n-s+r),i.wnext),(s-=r)?(i.window.set(e.subarray(n-s,n),0),i.wnext=s,i.whave=i.wsize):(i.wnext+=r,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=r))),0};var Kn={inflateReset:In,inflateReset2:An,inflateResetKeep:Wn,inflateInit:t=>Un(t,15),inflateInit2:Un,inflate:(t,e)=>{let n,s,r,i,a,o,l,h,c,d,u,f,p,g,m,w,b,y,v,k,x,z,S=0;const Z=new Uint8Array(4);let M,R;const T=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(On(t)||!t.output||!t.input&&0!==t.avail_in)return gn;n=t.state,n.mode===xn&&(n.mode=zn),a=t.next_out,r=t.output,l=t.avail_out,i=t.next_in,s=t.input,o=t.avail_in,h=n.hold,c=n.bits,d=o,u=l,z=un;t:for(;;)switch(n.mode){case vn:if(0===n.wrap){n.mode=zn;break}for(;c<16;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(2&n.wrap&&35615===h){0===n.wbits&&(n.wbits=15),n.check=0,Z[0]=255&h,Z[1]=h>>>8&255,n.check=It(n.check,Z,2,0),h=0,c=0,n.mode=16181;break}if(n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg="incorrect header check",n.mode=Tn;break}if((15&h)!==yn){t.msg="unknown compression method",n.mode=Tn;break}if(h>>>=4,c-=4,x=8+(15&h),0===n.wbits&&(n.wbits=x),x>15||x>n.wbits){t.msg="invalid window size",n.mode=Tn;break}n.dmax=1<<n.wbits,n.flags=0,t.adler=n.check=1,n.mode=512&h?16189:xn,h=0,c=0;break;case 16181:for(;c<16;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(n.flags=h,(255&n.flags)!==yn){t.msg="unknown compression method",n.mode=Tn;break}if(57344&n.flags){t.msg="unknown header flags set",n.mode=Tn;break}n.head&&(n.head.text=h>>8&1),512&n.flags&&4&n.wrap&&(Z[0]=255&h,Z[1]=h>>>8&255,n.check=It(n.check,Z,2,0)),h=0,c=0,n.mode=16182;case 16182:for(;c<32;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}n.head&&(n.head.time=h),512&n.flags&&4&n.wrap&&(Z[0]=255&h,Z[1]=h>>>8&255,Z[2]=h>>>16&255,Z[3]=h>>>24&255,n.check=It(n.check,Z,4,0)),h=0,c=0,n.mode=16183;case 16183:for(;c<16;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}n.head&&(n.head.xflags=255&h,n.head.os=h>>8),512&n.flags&&4&n.wrap&&(Z[0]=255&h,Z[1]=h>>>8&255,n.check=It(n.check,Z,2,0)),h=0,c=0,n.mode=16184;case 16184:if(1024&n.flags){for(;c<16;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}n.length=h,n.head&&(n.head.extra_len=h),512&n.flags&&4&n.wrap&&(Z[0]=255&h,Z[1]=h>>>8&255,n.check=It(n.check,Z,2,0)),h=0,c=0}else n.head&&(n.head.extra=null);n.mode=16185;case 16185:if(1024&n.flags&&(f=n.length,f>o&&(f=o),f&&(n.head&&(x=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Uint8Array(n.head.extra_len)),n.head.extra.set(s.subarray(i,i+f),x)),512&n.flags&&4&n.wrap&&(n.check=It(n.check,s,f,i)),o-=f,i+=f,n.length-=f),n.length))break t;n.length=0,n.mode=16186;case 16186:if(2048&n.flags){if(0===o)break t;f=0;do{x=s[i+f++],n.head&&x&&n.length<65536&&(n.head.name+=String.fromCharCode(x))}while(x&&f<o);if(512&n.flags&&4&n.wrap&&(n.check=It(n.check,s,f,i)),o-=f,i+=f,x)break t}else n.head&&(n.head.name=null);n.length=0,n.mode=16187;case 16187:if(4096&n.flags){if(0===o)break t;f=0;do{x=s[i+f++],n.head&&x&&n.length<65536&&(n.head.comment+=String.fromCharCode(x))}while(x&&f<o);if(512&n.flags&&4&n.wrap&&(n.check=It(n.check,s,f,i)),o-=f,i+=f,x)break t}else n.head&&(n.head.comment=null);n.mode=16188;case 16188:if(512&n.flags){for(;c<16;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(4&n.wrap&&h!==(65535&n.check)){t.msg="header crc mismatch",n.mode=Tn;break}h=0,c=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),t.adler=n.check=0,n.mode=xn;break;case 16189:for(;c<32;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}t.adler=n.check=En(h),h=0,c=0,n.mode=kn;case kn:if(0===n.havedict)return t.next_out=a,t.avail_out=l,t.next_in=i,t.avail_in=o,n.hold=h,n.bits=c,pn;t.adler=n.check=1,n.mode=xn;case xn:if(e===cn||e===dn)break t;case zn:if(n.last){h>>>=7&c,c-=7&c,n.mode=Rn;break}for(;c<3;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}switch(n.last=1&h,h>>>=1,c-=1,3&h){case 0:n.mode=16193;break;case 1:if(Ln(n),n.mode=Zn,e===dn){h>>>=2,c-=2;break t}break;case 2:n.mode=16196;break;case 3:t.msg="invalid block type",n.mode=Tn}h>>>=2,c-=2;break;case 16193:for(h>>>=7&c,c-=7&c;c<32;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if((65535&h)!=(h>>>16^65535)){t.msg="invalid stored block lengths",n.mode=Tn;break}if(n.length=65535&h,h=0,c=0,n.mode=Sn,e===dn)break t;case Sn:n.mode=16195;case 16195:if(f=n.length,f){if(f>o&&(f=o),f>l&&(f=l),0===f)break t;r.set(s.subarray(i,i+f),a),o-=f,i+=f,l-=f,a+=f,n.length-=f;break}n.mode=xn;break;case 16196:for(;c<14;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(n.nlen=257+(31&h),h>>>=5,c-=5,n.ndist=1+(31&h),h>>>=5,c-=5,n.ncode=4+(15&h),h>>>=4,c-=4,n.nlen>286||n.ndist>30){t.msg="too many length or distance symbols",n.mode=Tn;break}n.have=0,n.mode=16197;case 16197:for(;n.have<n.ncode;){for(;c<3;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}n.lens[T[n.have++]]=7&h,h>>>=3,c-=3}for(;n.have<19;)n.lens[T[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,M={bits:n.lenbits},z=ln(0,n.lens,0,19,n.lencode,0,n.work,M),n.lenbits=M.bits,z){t.msg="invalid code lengths set",n.mode=Tn;break}n.have=0,n.mode=16198;case 16198:for(;n.have<n.nlen+n.ndist;){for(;S=n.lencode[h&(1<<n.lenbits)-1],m=S>>>24,w=S>>>16&255,b=65535&S,!(m<=c);){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(b<16)h>>>=m,c-=m,n.lens[n.have++]=b;else{if(16===b){for(R=m+2;c<R;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(h>>>=m,c-=m,0===n.have){t.msg="invalid bit length repeat",n.mode=Tn;break}x=n.lens[n.have-1],f=3+(3&h),h>>>=2,c-=2}else if(17===b){for(R=m+3;c<R;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}h>>>=m,c-=m,x=0,f=3+(7&h),h>>>=3,c-=3}else{for(R=m+7;c<R;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}h>>>=m,c-=m,x=0,f=11+(127&h),h>>>=7,c-=7}if(n.have+f>n.nlen+n.ndist){t.msg="invalid bit length repeat",n.mode=Tn;break}for(;f--;)n.lens[n.have++]=x}}if(n.mode===Tn)break;if(0===n.lens[256]){t.msg="invalid code -- missing end-of-block",n.mode=Tn;break}if(n.lenbits=9,M={bits:n.lenbits},z=ln(1,n.lens,0,n.nlen,n.lencode,0,n.work,M),n.lenbits=M.bits,z){t.msg="invalid literal/lengths set",n.mode=Tn;break}if(n.distbits=6,n.distcode=n.distdyn,M={bits:n.distbits},z=ln(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,M),n.distbits=M.bits,z){t.msg="invalid distances set",n.mode=Tn;break}if(n.mode=Zn,e===dn)break t;case Zn:n.mode=Mn;case Mn:if(o>=6&&l>=258){t.next_out=a,t.avail_out=l,t.next_in=i,t.avail_in=o,n.hold=h,n.bits=c,en(t,u),a=t.next_out,r=t.output,l=t.avail_out,i=t.next_in,s=t.input,o=t.avail_in,h=n.hold,c=n.bits,n.mode===xn&&(n.back=-1);break}for(n.back=0;S=n.lencode[h&(1<<n.lenbits)-1],m=S>>>24,w=S>>>16&255,b=65535&S,!(m<=c);){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(w&&!(240&w)){for(y=m,v=w,k=b;S=n.lencode[k+((h&(1<<y+v)-1)>>y)],m=S>>>24,w=S>>>16&255,b=65535&S,!(y+m<=c);){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}h>>>=y,c-=y,n.back+=y}if(h>>>=m,c-=m,n.back+=m,n.length=b,0===w){n.mode=16205;break}if(32&w){n.back=-1,n.mode=xn;break}if(64&w){t.msg="invalid literal/length code",n.mode=Tn;break}n.extra=15&w,n.mode=16201;case 16201:if(n.extra){for(R=n.extra;c<R;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}n.length+=h&(1<<n.extra)-1,h>>>=n.extra,c-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=16202;case 16202:for(;S=n.distcode[h&(1<<n.distbits)-1],m=S>>>24,w=S>>>16&255,b=65535&S,!(m<=c);){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(!(240&w)){for(y=m,v=w,k=b;S=n.distcode[k+((h&(1<<y+v)-1)>>y)],m=S>>>24,w=S>>>16&255,b=65535&S,!(y+m<=c);){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}h>>>=y,c-=y,n.back+=y}if(h>>>=m,c-=m,n.back+=m,64&w){t.msg="invalid distance code",n.mode=Tn;break}n.offset=b,n.extra=15&w,n.mode=16203;case 16203:if(n.extra){for(R=n.extra;c<R;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}n.offset+=h&(1<<n.extra)-1,h>>>=n.extra,c-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){t.msg="invalid distance too far back",n.mode=Tn;break}n.mode=16204;case 16204:if(0===l)break t;if(f=u-l,n.offset>f){if(f=n.offset-f,f>n.whave&&n.sane){t.msg="invalid distance too far back",n.mode=Tn;break}f>n.wnext?(f-=n.wnext,p=n.wsize-f):p=n.wnext-f,f>n.length&&(f=n.length),g=n.window}else g=r,p=a-n.offset,f=n.length;f>l&&(f=l),l-=f,n.length-=f;do{r[a++]=g[p++]}while(--f);0===n.length&&(n.mode=Mn);break;case 16205:if(0===l)break t;r[a++]=n.length,l--,n.mode=Mn;break;case Rn:if(n.wrap){for(;c<32;){if(0===o)break t;o--,h|=s[i++]<<c,c+=8}if(u-=l,t.total_out+=u,n.total+=u,4&n.wrap&&u&&(t.adler=n.check=n.flags?It(n.check,r,u,a-u):Ot(n.check,r,u,a-u)),u=l,4&n.wrap&&(n.flags?h:En(h))!==n.check){t.msg="incorrect data check",n.mode=Tn;break}h=0,c=0}n.mode=16207;case 16207:if(n.wrap&&n.flags){for(;c<32;){if(0===o)break t;o--,h+=s[i++]<<c,c+=8}if(4&n.wrap&&h!==(4294967295&n.total)){t.msg="incorrect length check",n.mode=Tn;break}h=0,c=0}n.mode=16208;case 16208:z=fn;break t;case Tn:z=mn;break t;case 16210:return wn;default:return gn}return t.next_out=a,t.avail_out=l,t.next_in=i,t.avail_in=o,n.hold=h,n.bits=c,(n.wsize||u!==t.avail_out&&n.mode<Tn&&(n.mode<Rn||e!==hn))&&Nn(t,t.output,t.next_out,u-t.avail_out),d-=t.avail_in,u-=t.avail_out,t.total_in+=d,t.total_out+=u,n.total+=u,4&n.wrap&&u&&(t.adler=n.check=n.flags?It(n.check,r,u,t.next_out-u):Ot(n.check,r,u,t.next_out-u)),t.data_type=n.bits+(n.last?64:0)+(n.mode===xn?128:0)+(n.mode===Zn||n.mode===Sn?256:0),(0===d&&0===u||e===hn)&&z===un&&(z=bn),z},inflateEnd:t=>{if(On(t))return gn;let e=t.state;return e.window&&(e.window=null),t.state=null,un},inflateGetHeader:(t,e)=>{if(On(t))return gn;const n=t.state;return 2&n.wrap?(n.head=e,e.done=!1,un):gn},inflateSetDictionary:(t,e)=>{const n=e.length;let s,r,i;return On(t)?gn:(s=t.state,0!==s.wrap&&s.mode!==kn?gn:s.mode===kn&&(r=1,r=Ot(r,e,n,0),r!==s.check)?mn:(i=Nn(t,e,n,n),i?(s.mode=16210,wn):(s.havedict=1,un)))},inflateInfo:"pako inflate (from Nodeca project)"};var Yn=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const jn=Object.prototype.toString,{Z_NO_FLUSH:Pn,Z_FINISH:Cn,Z_OK:Vn,Z_STREAM_END:Xn,Z_NEED_DICT:Dn,Z_STREAM_ERROR:Gn,Z_DATA_ERROR:Hn,Z_MEM_ERROR:Qn}=Ut;function _n(t){this.options=Ae.assign({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&(15&e.windowBits||(e.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Fe,this.strm.avail_out=0;let n=Kn.inflateInit2(this.strm,e.windowBits);if(n!==Vn)throw new Error(At[n]);if(this.header=new Yn,Kn.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=Je.string2buf(e.dictionary):"[object ArrayBuffer]"===jn.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(n=Kn.inflateSetDictionary(this.strm,e.dictionary),n!==Vn)))throw new Error(At[n])}function $n(t,e){const n=new _n(e);if(n.push(t),n.err)throw n.msg||At[n.err];return n.result}_n.prototype.push=function(t,e){const n=this.strm,s=this.options.chunkSize,r=this.options.dictionary;let i,a,o;if(this.ended)return!1;for(a=e===~~e?e:!0===e?Cn:Pn,"[object ArrayBuffer]"===jn.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;;){for(0===n.avail_out&&(n.output=new Uint8Array(s),n.next_out=0,n.avail_out=s),i=Kn.inflate(n,a),i===Dn&&r&&(i=Kn.inflateSetDictionary(n,r),i===Vn?i=Kn.inflate(n,a):i===Hn&&(i=Dn));n.avail_in>0&&i===Xn&&n.state.wrap>0&&0!==t[n.next_in];)Kn.inflateReset(n),i=Kn.inflate(n,a);switch(i){case Gn:case Hn:case Dn:case Qn:return this.onEnd(i),this.ended=!0,!1}if(o=n.avail_out,n.next_out&&(0===n.avail_out||i===Xn))if("string"===this.options.to){let t=Je.utf8border(n.output,n.next_out),e=n.next_out-t,r=Je.buf2string(n.output,t);n.next_out=e,n.avail_out=s-e,e&&n.output.set(n.output.subarray(t,t+e),0),this.onData(r)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(i!==Vn||0!==o){if(i===Xn)return i=Kn.inflateEnd(this.strm),this.onEnd(i),this.ended=!0,!0;if(0===n.avail_in)break}}return!0},_n.prototype.onData=function(t){this.chunks.push(t)},_n.prototype.onEnd=function(t){t===Vn&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Ae.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var ts=function(t,e){return(e=e||{}).raw=!0,$n(t,e)},es={Inflate:_n,inflate:$n,inflateRaw:ts,ungzip:$n,constants:Ut};const{Deflate:ns,deflate:ss,deflateRaw:rs,gzip:is}=$e,{Inflate:as,inflate:os,inflateRaw:ls,ungzip:hs}=es;var cs={Deflate:ns,deflate:ss,deflateRaw:rs,gzip:is,Inflate:as,inflate:os,inflateRaw:ls,ungzip:hs,constants:Ut};const ds=new Uint8Array(atob("").split("").map((t=>t.charCodeAt(0)))),us=new V(JSON.parse(cs.ungzip(ds,{to:"string"})),{includeScore:!0,keys:["question"],useExtendedSearch:!0});function fs(t,e,n=2){if(!t||!e)return 0;if(t===e)return"100.00";const s=t.length,r=e.length,i=Math.max(s,r);let a=Array(r+1).fill(0).map(((t,e)=>e)),o=Array(r+1).fill(0);for(let n=1;n<=s;n++){o[0]=n;for(let s=1;s<=r;s++){const r=t[n-1]===e[s-1]?0:1;o[s]=Math.min(a[s]+1,o[s-1]+1,a[s-1]+r)}[a,o]=[o,a]}return(100*(1-a[r]/i)).toFixed(n)}const ps=new MouseEvent("click",{bubbles:!0,cancelable:!0,view:window});let gs=1,ms=0,ws=0;function bs(t,e){document.querySelectorAll(".qu-box").forEach((t=>{const n=document.querySelector(".qu-item .content").innerText.trim(),s=n?(r=n,us.search(r)):[];var r;if(s.length>0){e?.disconnect();const t=[...document.querySelector(".qu-answer").querySelectorAll(".item")],n=s[Math.floor(gs++/5)];if((!n||gs>50)&&(gs=1,location.reload()),"string"==typeof n?.item.answer){const e=n?.item.answer;t.sort(((t,n)=>fs(e,n.querySelector(".content").innerText.trim())-fs(e,t.querySelector(".content").innerText.trim()))),!t[0].classList.contains("active")&&t[0].dispatchEvent(ps)}else{const e=n?.item.type;"填空题"===e?(ms=n?.item.answer.length,n?.item.answer.forEach(((e,n)=>{const s=t[n].querySelector("input");s.focus(),s.value=e;const r=new Event("change",{bubbles:!0});s.dispatchEvent(r),s.blur()}))):(ms=n?.item.answer.length,n?.item.answer.forEach((e=>{const n=t.filter((t=>t.querySelector(".content").innerText.includes(e)))||t.sort(((t,n)=>fs(e,n.querySelector(".content").innerText.trim())-fs(e,t.querySelector(".content").innerText.trim())));n.length&&!n[0].classList.contains("active")&&n[0].dispatchEvent(ps)})))}}}))}let ys=JSON.parse(localStorage.getItem("mainList"))||[],vs=localStorage.getItem("mainListTotal")||0,ks=null,xs=[],zs=null;!function(){const t=window.XMLHttpRequest;window.XMLHttpRequest=function(){const e=new t,n=e.open,s=e.send;return e.open=function(){return n.apply(this,arguments)},e.send=function(){return this.addEventListener("load",(function(){if(this.responseURL.includes("exam-boot/course/study")&&this.responseURL.includes("pageSize=12")){const t=JSON.parse(this.response).result;ys=[...ys,...t.records.map((t=>t.id))],vs=t.total,localStorage.setItem("mainList",JSON.stringify(ys)),localStorage.setItem("mainListTotal",vs)}else if(this.responseURL.includes("exam-boot/course/getCourseStudyDetail"))ks=JSON.parse(this.response).result;else if(this.responseURL.includes("userExamResultDetail"))zs=JSON.parse(this.response).result;else if(this.responseURL.includes("course/userCourseList")){const t=JSON.parse(this.response).result.records.map((t=>t.id));ys=ys.filter((e=>!t.includes(e))),localStorage.setItem("mainList",JSON.stringify(ys))}})),s.apply(this,arguments)},e};const e=window.fetch;window.fetch=function(){return e.apply(this,arguments).then((t=>(t.clone().text().then((t=>{})),t)))}}();let Ss=null,Zs=0;function Ms(t,e){return function(...n){const s=Date.now();s-Zs>=e?(t.apply(this,n),Zs=s):Ss||(Ss=setTimeout((()=>{t.apply(this,n),Zs=s,Ss=null}),e-(s-Zs)))}}const Rs=window.open;window.open=function(t,e,n){if("_blank"!==e)return Rs(t,e,n);window.location.href=t};const Ts=t=>{window.location.href=`https://service.cpma.org.cn/edu/course/onlineStudy/${t}`};let Es="";setInterval((()=>{const t=window.location.pathname;if(t.includes("course/study"))vs&&vs<=ys.length?window.location.href="https://service.cpma.org.cn/edu/system/person":document.querySelector(".ant-pagination-next")?.click();else if(t.includes("course/courseDetails")){if(!ks)return;if(ks?.finishNum<ks?.catalogList.length&&(window.location.href=`https://service.cpma.org.cn/edu/course/onlineStudy/${ys[0]}`),1===ks?.courseStudyProcess){document.querySelector(".ant-modal-body .ant-btn-primary")?document.querySelector(".ant-modal-body .ant-btn-primary").click():(document.querySelector("#rc-tabs-0-tab-courseExam")?.click(),Ms((()=>{const t=document.querySelector(".ant-space-item .ant-btn-warning");t?(t.dispatchEvent(ps),"通过"===document.querySelector(".ant-card-body .ant-tag").innerText.trim()?ys.length>1?(Ms((()=>{Es=ys.shift()}),3e3)(),localStorage.setItem("mainList",JSON.stringify(ys)),Ts(ys[0])):localStorage.setItem("mainList",JSON.stringify([])):document.querySelector(".ant-space-item .ant-btn-primary")?.dispatchEvent(ps)):document.querySelector(".ant-space-item .ant-btn-primary")?.dispatchEvent(ps)}),5e3)())}}else if(t.includes("course/onlineStudy")){const e=document.querySelector("video");if(xs&&!xs.length&&(xs=[...document.querySelectorAll(".double-layer .section-title")]),e){(e.paused||1.5!==e.playbackRate)&&(e.playbackRate=1.5,e.play(),e.volume=69);const n=setInterval((()=>{e.currentTime+300<e.duration?e.currentTime+=300:(e.currentTime=e.duration,clearInterval(n)),e.duration&&(e.currentTime=e.duration-1)}),1e3);function s(){const t=xs.shift();var e;t?t.querySelector(".task-hour").innerText.includes("已学完")?s():t.click():ys[0]&&(e=ys[0],window.location.href=`https://service.cpma.org.cn/edu/course/courseDetails/${e}`)}e.addEventListener("ended",s)}}else if(t.includes("exam/userexamresult")){const r=[...document.querySelectorAll(".ant-anchor-link")].every((t=>t.classList.contains("success")));zs&&Ms((()=>{r?(ys.includes(Es)&&(ys.length>1?(ys.shift(),localStorage.setItem("mainList",JSON.stringify(ys))):localStorage.setItem("mainList",JSON.stringify([]))),setTimeout((()=>{Es=ys[0],Ts(ys[0])}),1e3)):(document.querySelector(".score-card").addEventListener("click",(()=>{Es=ys[0],Ts(ys[0])})),setTimeout((()=>{[...document.querySelectorAll(".score-box span")].some((t=>"通过"===t.innerText.trim()))&&(Es=ys[0],Ts(ys[0]))}),1e3))}),1e4)()}else if(t.includes("exam/onlineExam")){bs();const i=document.querySelectorAll(".qu-answer .item"),a=i&&[...i]?.filter((t=>t.classList.contains("active")||t.querySelector("input")?.value));a.length&&a.length===ms&&(document.querySelector(".ant-btn.ant-btn-warning")?.click(),gs=1,ms=0),document.querySelector(".ant-progress-text svg")&&Ms((()=>{ws=0,document.querySelector(".all-box-right .ant-btn.ant-btn-primary").click()}),2e3)()}else if(t.includes("system/person")){[...document.querySelectorAll(".ant-tabs-nav-list .ant-tabs-tab")].find((t=>t.innerText.includes("已学课程")))?.click();const o=document.querySelector(".ant-pagination-next");o?.click();document.querySelector(".ant-pagination-prev")&&"true"===o.getAttribute("aria-disabled")&&Ts(ys[0])}}),1e3)})();
})();